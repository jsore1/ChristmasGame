function init(self)
	msg.post(".", "acquire_input_focus")
	math.randomseed(os.time())

	reset(self)

	fill_fields(self)
	create_objects(self)
end

function reset(self)
	self.counter = 0
	self.item = nil
	self.item_index = nil
	self.current_item = nil
	self.current_item_index = nil
	self.previous_obj_id = nil
	self.active = false
	self.items_done = {}

	self.fields_pos = {}
	self.game_fields = {}
	self.objects_id = {}
end

function create_objects(self)
	for i = 1, 12 do
		self.fields_pos[i] = go.get_position("/fields/item" .. i)
		if self.game_fields[i] == 1 then
			self.objects_id[i] = factory.create("#ballfactory", self.fields_pos[i], nil, nil, 0.0)
		elseif self.game_fields[i] == 2 then
			self.objects_id[i] = factory.create("#bellsfactory", self.fields_pos[i], nil, nil, 0.0)
		elseif self.game_fields[i] == 3 then
			self.objects_id[i] = factory.create("#cakefactory", self.fields_pos[i], nil, nil, 0.0)
		elseif self.game_fields[i] == 4 then
			self.objects_id[i] = factory.create("#giftfactory", self.fields_pos[i], nil, nil, 0.0)
		elseif self.game_fields[i] == 5 then
			self.objects_id[i] = factory.create("#treefactory", self.fields_pos[i], nil, nil, 0.0)
		end
	end
end

function fill_fields(self)
	local amount_objects = { ball = 2, bells = 2, cake = 2, gift = 2, tree = 4 }
	local random
	local i = 1
	
	while true do
		random = math.random(5)
		if random == 1 and amount_objects.ball ~= 0 then
			self.game_fields[i] = random
			amount_objects.ball = amount_objects.ball - 1
			i = i + 1
		elseif random == 2 and amount_objects.bells ~= 0 then
			self.game_fields[i] = random
			amount_objects.bells = amount_objects.bells - 1
			i = i + 1
		elseif random == 3 and amount_objects.cake ~= 0 then
			self.game_fields[i] = random
			amount_objects.cake = amount_objects.cake - 1
			i = i + 1
		elseif random == 4 and amount_objects.gift ~= 0 then
			self.game_fields[i] = random
			amount_objects.gift = amount_objects.gift - 1
			i = i + 1
		elseif random == 5 and amount_objects.tree ~= 0 then
			self.game_fields[i] = random
			amount_objects.tree = amount_objects.tree - 1
			i = i + 1
		end
		if i == 13 then
			break
		end
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("refresh") then
		msg.post("/gui#level", "refresh_game")
		for i = 1, #self.objects_id do
			go.delete(self.objects_id[i])
		end
		
		reset(self)

		fill_fields(self)
		create_objects(self)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed and not self.active then
		local field = go.get_id("/fields/item1")
		for i = 1, 12 do
			if ((action.x >= (self.fields_pos[i].x - 75)) and (action.x <= (self.fields_pos[i].x + 75)))
			and
			((action.y >= (self.fields_pos[i].y - 75)) and (action.y <= (self.fields_pos[i].y + 75)))
			then
				for j = 1, #self.items_done do
					if i == self.items_done[j] then
						return
					end
				end
				go.animate(self.objects_id[i], "scale", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_OUTSINE, 0.3)
				self.current_item = self.game_fields[i]
				self.current_item_index = i
				if self.current_item == self.item and self.counter == 1 then
					table.insert(self.items_done, self.current_item_index)
					table.insert(self.items_done, self.item_index)
					self.counter = 0
					self.current_item = nil
					self.item = nil
					self.previous_obj_id = nil
					msg.post("/gui#level", "update_score", { score = 50 })
					if #self.items_done == 12 then
						msg.post("/gui#level", "the_end")
					end
					break
				elseif self.counter == 1 then
					timer.delay(1, false, function()
						go.animate(self.objects_id[i], "scale", go.PLAYBACK_ONCE_FORWARD, 0.0, go.EASING_OUTSINE, 0.3)
					end)
					timer.delay(1, false, function()
						go.animate(self.previous_obj_id, "scale", go.PLAYBACK_ONCE_FORWARD, 0.0, go.EASING_OUTSINE, 0.3)
						self.previous_obj_id = nil
						self.active = false
					end)
					self.counter = 0
					self.current_item = nil
					self.item = nil
					self.active = true
					msg.post("/gui#level", "update_score", { score = -50 })
					break
				end
				self.item = self.current_item
				self.item_index = self.current_item_index
				self.previous_obj_id = self.objects_id[i]
				self.counter = self.counter + 1
			end
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
